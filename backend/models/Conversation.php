<?php

namespace backend\models;

use Yii;
use yii\db\ActiveQuery;

/**
 * This is the model class for table "conversation".
 *
 * @property int $id
 * @property string $date
 * @property string $startsAt
 * @property string $endsAt
 * @property int|null $tutorId
 * @property string|null $tutorName
 * @property string|null $tutorEmail
 * @property string|null $tutorImage
 * @property string $level
 * @property string|null $createdAt
 * @property string $visible
 * @property string|null $eventId
 *
 * @property ConversationUsers[] $conversationUsers
 * @property Teachers $teacher
 * @property Feedback[] $feedbacks
 */
class Conversation extends \yii\db\ActiveRecord
{

    const CONVERSATION_CREATE_UPDATE_DELETE = 'conversation_create_update_delete';

    public function init()
    {
        $this->on(self::CONVERSATION_CREATE_UPDATE_DELETE, function ($event) {
            $conversationRoomUserCount = ConversationUsers::find()->where(['conversationId' => $event->message->id, 'requestDate' => date('Y-m-d')])->count();

            $conversationRoom = array([
                'id' => $event->message->id,
                'startsAt' => $event->message->startsAt,
                'endsAt' => $event->message->endsAt,
                'tutorName' => $event->message->tutorName,
                'tutorImage' => $event->message->tutorImage,
                'videoPresentation' => $event->message->videoPresentation,
                'count' => $conversationRoomUserCount
            ]);

            if ($event->message->level == 'beginner') {
                Yii::$app->pusher->push('beginner-channel', $event->action.'-event', json_encode($conversationRoom));
            } elseif ($event->message->level == 'elementary') {
                Yii::$app->pusher->push('elementary-channel', $event->action.'-event', json_encode($conversationRoom));
            } elseif ($event->message->level == 'pre-intermediate') {
                Yii::$app->pusher->push('pre-intermediate-channel', $event->action.'-event', json_encode($conversationRoom));
            } elseif ($event->message->level == 'intermediate') {
                Yii::$app->pusher->push('intermediate-channel', $event->action.'-event', json_encode($conversationRoom));
            } elseif ($event->message->level == 'upper-intermediate') {
                Yii::$app->pusher->push('upper-intermediate-channel', $event->action.'-event', json_encode($conversationRoom));
            } elseif ($event->message->level == 'advanced') {
                Yii::$app->pusher->push('advanced-channel', $event->action.'-event', json_encode($conversationRoom));
            } elseif ($event->message->level == 'empty') {
                Yii::$app->pusher->push('empty-channel', $event->action.'-event', json_encode($conversationRoom));
            }
        });

        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'conversation';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['date', 'startsAt', 'endsAt', 'level', 'visible'], 'required'],
            [['date', 'startsAt', 'endsAt', 'createdAt', 'tutorId'], 'safe'],
            [['level', 'visible'], 'string'],
            [['eventId'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'date' => 'Date',
            'startsAt' => 'Starts At',
            'endsAt' => 'Ends At',
            'tutorName' => 'Tutor Name',
            'tutorImage' => 'Tutor Image',
            'level' => 'Level',
            'createdAt' => 'Created At',
            'visible' => 'Visible',
        ];
    }


    /**
     * Gets query for [[ConversationUsers]].
     *
     * @return ActiveQuery
     */
    public function getConversationUsers(): ActiveQuery
    {
        return $this->hasMany(ConversationUsers::className(), ['conversationId' => 'id']);
    }

    /**
     * Gets query for [[ConversationUsers]].
     *
     * @return ActiveQuery
     */
    public function getReservedConversationUsers(): ActiveQuery
    {
        return $this->hasMany(ConversationUsers::className(), ['conversationId' => 'id'])->andOnCondition(['action' => 'reserve']);
    }


    /**
     * Gets query for [[Teacher]].
     *
     * @return ActiveQuery
     */
    public function getTeacher(): ActiveQuery
    {
        return $this->hasOne(Teachers::className(), ['id' => 'tutorId']);
    }


    /**
     * Gets query for [[Feedbacks]].
     *
     * @return ActiveQuery
     */
    public function getFeedbacks(): ActiveQuery
    {
        return $this->hasMany(Feedback::className(), ['classId' => 'id']);
    }

}
